import React, { useState, useEffect } from 'react';
import { Form, Button } from 'react-bootstrap';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';
import styled from 'styled-components';


const Container = styled.div`
  width: auto; 
  max-width: 600px; 
  margin: 5rem auto; 
  padding: 2rem;
  background-color: #f9f9f9; 
  border-radius: 8px; 
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); 
  min-height: 600px; 
  display: flex; 
  flex-direction: column; 
  align-items: stretch; 
  box-sizing: border-box;

  @media (max-width: 600px) {
    padding: 1rem; 
    min-height: 500px; 
  }
`;

const StyledForm = styled(Form)`
  display: flex;
  flex-direction: column; 
  gap: 1rem; 
`;

const FormControl = styled(Form.Control)`
  padding: 0.5rem; 
  border-radius: 4px; 
`;

const SubmitButton = styled(Button)`
  width: 100%; 
  padding: 0.75rem; 
`;

const GrievanceEntry = () => {
  const [grievanceId] = useState('Autogenerated Grievance No');
  const [date] = useState(new Date().toLocaleDateString('en-GB'));
  const [type, setType] = useState([]);
  const [formData, setFormData] = useState({
    department: '',
    designation: '',
    employeeName: '',
    complainantName: '',
    aadhaarNo: '',
    mobileNo: '',
    taluka: '',
    village: '',
    type: '',
    document: null,
  });
  const navigate = useNavigate();
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const fetchGrievanceTypes = async () => {
      try {
        const response = await axios.get('http://localhost:8989/grievanceType');
        setType(response.data);
      } catch (error) {
        console.error('Error fetching grievance types:', error);
      }
    };

    fetchGrievanceTypes();
  }, []);

  const isAlphabetic = (value) => /^[A-Za-z\s]+$/.test(value);
  const isNumeric = (value) => /^[0-9]+$/.test(value);

  const handleChange = (e) => {
    const { name, value } = e.target;
    const trimmedValue = value.trim();
    let errorMessage = '';

    const maxLength = 50;

    switch (name) {
      case 'designation':
      case 'employeeName':
      case 'complainantName':
        if (trimmedValue === '' || !isAlphabetic(trimmedValue)) {
          errorMessage = 'फक्त अक्षरे असावीत आणि हे क्षेत्र रिक्त असू नये.';
        } else if (trimmedValue.length > maxLength) {
          errorMessage = `कृपया ${maxLength} अक्षरांच्या आत माहिती प्रविष्ट करा.`;
        }
        break;

     

      case 'aadhaarNo':
        if (
          trimmedValue &&
          (!isNumeric(trimmedValue) ||
            trimmedValue.length !== 12 ||
            /^0{12}$/.test(trimmedValue))
        ) {
          errorMessage = 'फक्त 12 अंक असावेत आणि सर्व शून्ये मान्य नाहीत.';
        }
        break;
    
      case 'mobileNo':
        if (
          trimmedValue &&
          (!isNumeric(trimmedValue) ||
            trimmedValue.length !== 10 ||
            /^0{10}$/.test(trimmedValue))
        ) {
          errorMessage = 'फक्त 10 अंक असावेत आणि सर्व शून्ये मान्य नाहीत.';
        }
        break;

      default:
        break;
    }

    setFormData({
      ...formData,
      [name]: value,
    });

    setErrors({
      ...errors,
      [name]: errorMessage,
    });
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    let errorMessage = '';

    if (file) {
      const allowedTypes = ['application/pdf', 'image/png', 'image/jpeg', 'image/jpg'];
      if (!allowedTypes.includes(file.type)) {
        errorMessage = 'कृपया फक्त PDF, PNG, JPG, किंवा JPEG फाइल अपलोड करा.';
      }

      const maxSize = 5 * 1024 * 1024; // 5MB in bytes
      if (file.size > maxSize) {
        errorMessage = 'फाइल आकार 5MB पेक्षा जास्त नसावा.';
      }
    }

    setFormData({
      ...formData,
      document: file,
    });

    setErrors({
      ...errors,
      document: errorMessage,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (Object.values(errors).some((error) => error)) {
      alert('फॉर्ममध्ये त्रुटी आहेत, कृपया सर्व फील्ड्स तपासा.');
      return;
    }

    const apiUrl = 'http://localhost:8989/grievance/add';
    const data = new FormData();
    data.append('grievanceId', grievanceId);
    data.append('date', date);
    Object.keys(formData).forEach((key) => {
      if (formData[key]) {
        data.append(key, formData[key]);
      }
    });

    try {
      const response = await axios.post(apiUrl, data, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      alert('तक्रार यशस्वीरित्या सबमिट झाली');
      navigate('/user-report');
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('तक्रार सबमिट करताना त्रुटी आली आहे.');
    }
  };

  return (

   
    <Container>

      

      <h4 className="card-title mb-4">तक्रार नोंदणी फॉर्म</h4>
      <StyledForm onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तक्रार क्र. *</Form.Label>
          <Form.Control type="text" value={grievanceId} disabled />
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तारीख *</Form.Label>
          <Form.Control type="text" value={date} disabled />
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>विभाग *</Form.Label>
          <Form.Select name="department" value={formData.department} onChange={handleChange} required>
            <option value="">विभाग निवडा</option>
            <option value="education">शिक्षण</option>
            <option value="health">आरोग्य</option>
            <option value="finance">वित्त</option>
          </Form.Select>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>पद *</Form.Label>
          <FormControl
            type="text"
            placeholder="पद टाका"
            name="designation"
            value={formData.designation}
            onChange={handleChange}
            maxLength="50"
            isInvalid={!!errors.designation}
            required
          />
          <Form.Control.Feedback type="invalid">{errors.designation}</Form.Control.Feedback>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>कर्मचारी *</Form.Label>
          <FormControl
            type="text"
            placeholder="कर्मचारीचे नाव"
            name="employeeName"
            value={formData.employeeName}
            onChange={handleChange}
            maxLength="50"
            isInvalid={!!errors.employeeName}
            required
          />
          <Form.Control.Feedback type="invalid">{errors.employeeName}</Form.Control.Feedback>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तक्रारकर्त्याचे नाव *</Form.Label>
          <FormControl
            type="text"
            placeholder="तक्रारकर्त्याचे नाव टाका"
            name="complainantName"
            value={formData.complainantName}
            onChange={handleChange}
            maxLength="50"
            isInvalid={!!errors.complainantName}
            required
          />
          <Form.Control.Feedback type="invalid">{errors.complainantName}</Form.Control.Feedback>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>आधार क्र.</Form.Label>
          <FormControl
            type="text"
            placeholder="आधार क्रमांक टाका"
            name="aadhaarNo"
            value={formData.aadhaarNo}
            onChange={handleChange}
            isInvalid={!!errors.aadhaarNo}
          />
          <Form.Control.Feedback type="invalid">{errors.aadhaarNo}</Form.Control.Feedback>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>मोबाईल क्र. *</Form.Label>
          <FormControl
            type="text"
            placeholder="मोबाईल क्रमांक टाका"
            name="mobileNo"
            value={formData.mobileNo}
            onChange={handleChange}
            isInvalid={!!errors.mobileNo}
            required
          />
          <Form.Control.Feedback type="invalid">{errors.mobileNo}</Form.Control.Feedback>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तालुका *</Form.Label>
          <Form.Select name="taluka" value={formData.taluka} onChange={handleChange} required>
            <option value="">तालुका निवडा</option>
            <option value="taluka1">हवेली</option>
            <option value="taluka2">पुणेशहर</option>
            <option value="taluka3">मावळ</option>
            <option value="taluka4">मुळशी</option>
            <option value="taluka5">शिरूर</option>
            <option value="taluka6">बारामती</option>
            <option value="taluka7">दौंड</option>
            <option value="taluka8">इंदापूर</option>
            <option value="taluka9">भोर</option>
            <option value="taluka10">वेल्हा</option>
            <option value="taluka11">पुरंदर</option>
            <option value="taluka12">खेड</option>
            <option value="taluka13">जुन्नर</option>
            <option value="taluka14">आंबेगाव</option>
          </Form.Select>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>गाव *</Form.Label>
          <Form.Select name="village" value={formData.village} onChange={handleChange} required>
            <option value="">गाव निवडा</option>
            <option value="village1">आंजणगाव (बारामती)</option>
            <option value="village2">कनाडवाडी</option>
            <option value="village3">करंजेपूल</option>
            <option value="village4">कऱ्हाटी</option>
            <option value="village5">कऱ्हावागाज</option>
            <option value="village6">कांबळेश्वर</option>
            <option value="village7">काटफाळ</option>
            <option value="village8">कामगळवाडी</option>
            <option value="village9">कारखेळ</option>
            <option value="village10">कुतवालवाडी</option>
            <option value="village11">कोलोळी</option>
            <option value="village12">गदादारवाडी</option>
            <option value="village13">खराडेवाडी</option>
            <option value="village14">गाडीखेळवाडी</option>
            <option value="village15">गुणवाडी</option>
            <option value="village16">गोजुबावी</option>
            <option value="village17">चांदगुडेवाडी</option>
            <option value="village18">चोपडाज</option>
            <option value="village19">जरडवाडी</option>
            <option value="village20">जळगाव सुपे</option>
            <option value="village21">जाळोची</option>
          </Form.Select>
        </Form.Group>
        <Form.Group className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तक्रारीचा प्रकार *</Form.Label>
          <Form.Select name="type" value={formData.type} onChange={handleChange} required>
            <option value="">तक्रारीचा प्रकार निवडा</option>
            {type.map((type) => (
              <option key={type.id} value={type.name || type.type}>
                {type.name || type.type}
              </option>
            ))}
          </Form.Select>
        </Form.Group>
        <Form.Group controlId="formFile" className="mb-3">
          <Form.Label style={{ textAlign: 'left', display: 'block' }}>तक्रारीचे कागदपत्र अपलोड करा</Form.Label>
          <FormControl
            type="file"
            name="document"
            accept=".pdf, .png, .jpg, .jpeg"
            onChange={handleFileChange}
            isInvalid={!!errors.document}
            required
          />
          <Form.Control.Feedback type="invalid">{errors.document}</Form.Control.Feedback>
        </Form.Group>
        <div className="d-flex gap-2">
          <SubmitButton variant="primary" type="submit">
          
            सबमिट करा
            
          </SubmitButton>
          <Link to="/grievance-type" className="btn btn-secondary">
            तक्रार प्रकार पहा
          </Link>
        </div>
      </StyledForm>

      <div style={{ marginTop: '1rem', textAlign: 'center' }}>
        <Link to="/user-report">
          <Button variant="primary">View User Report</Button>
        </Link>
      </div>
    </Container>
   
   
  );
};

export default GrievanceEntry;
